// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const findUserByID = `-- name: FindUserByID :one
select u.id, u.fullname, u.role, u.is_confirmed, u.created_at, u.updated_at, u.community_id from users u where u.id = $1
`

func (q *Queries) FindUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, findUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Role,
		&i.IsConfirmed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CommunityID,
	)
	return i, err
}

const insertCommunity = `-- name: InsertCommunity :one
insert into communities (
    id,
    rt_number,
    rw_number,
    subdistrict,
    district,
    city,
    province,
    is_confirmed
) values ($1, $2, $3, $4, $5, $6, $7, $8)
returning id
`

type InsertCommunityParams struct {
	ID          uuid.UUID `json:"id"`
	RtNumber    int32     `json:"rt_number"`
	RwNumber    int32     `json:"rw_number"`
	Subdistrict string    `json:"subdistrict"`
	District    string    `json:"district"`
	City        string    `json:"city"`
	Province    string    `json:"province"`
	IsConfirmed bool      `json:"is_confirmed"`
}

func (q *Queries) InsertCommunity(ctx context.Context, arg InsertCommunityParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertCommunity,
		arg.ID,
		arg.RtNumber,
		arg.RwNumber,
		arg.Subdistrict,
		arg.District,
		arg.City,
		arg.Province,
		arg.IsConfirmed,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const insertUser = `-- name: InsertUser :one
insert into users (
    id,
    community_id,
    fullname,
    role,
    is_confirmed
) values ($1, $2, $3, $4, $5)
returning id
`

type InsertUserParams struct {
	ID          uuid.UUID `json:"id"`
	CommunityID uuid.UUID `json:"community_id"`
	Fullname    string    `json:"fullname"`
	Role        string    `json:"role"`
	IsConfirmed bool      `json:"is_confirmed"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.ID,
		arg.CommunityID,
		arg.Fullname,
		arg.Role,
		arg.IsConfirmed,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateCommunityStatus = `-- name: UpdateCommunityStatus :exec
update communities
set is_confirmed = $1
where id = (
  select u.community_id
  from users u
  where u.id = $2
)
`

type UpdateCommunityStatusParams struct {
	IsConfirmed bool      `json:"is_confirmed"`
	ID          uuid.UUID `json:"id"`
}

func (q *Queries) UpdateCommunityStatus(ctx context.Context, arg UpdateCommunityStatusParams) error {
	_, err := q.db.Exec(ctx, updateCommunityStatus, arg.IsConfirmed, arg.ID)
	return err
}

const updateUserStatus = `-- name: UpdateUserStatus :exec
update users
set is_confirmed = $1
where id = $2
`

type UpdateUserStatusParams struct {
	IsConfirmed bool      `json:"is_confirmed"`
	ID          uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUserStatus(ctx context.Context, arg UpdateUserStatusParams) error {
	_, err := q.db.Exec(ctx, updateUserStatus, arg.IsConfirmed, arg.ID)
	return err
}
